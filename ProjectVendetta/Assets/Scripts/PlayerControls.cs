//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""MoveAndShoot"",
            ""id"": ""5c05dc1e-6632-43d2-90b0-fffb0b7512bf"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""06642325-b9ea-42a7-9f35-0ed6e1910b8e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HorShoot"",
                    ""type"": ""Button"",
                    ""id"": ""63a0e719-01b6-466d-ad5d-d3657f16bb15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VertShoot"",
                    ""type"": ""Button"",
                    ""id"": ""5eb270c0-b01d-47b5-98c1-f97c270c1840"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""1f228861-538d-4e3f-96c9-8aab7c066890"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4b0318bb-5ce4-49c5-a8b2-07a433bea595"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7fb6f560-64b9-4caa-9cc7-c01b1be459d3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c96c04b7-9e44-443f-98cb-8aeaf9837224"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a096812e-567e-4f08-8e53-cc61b05d14c8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""HorAxis"",
                    ""id"": ""5c115b65-f0b6-41df-8770-aa8b0aabff95"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorShoot"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ebe34ed8-4657-4653-a9b4-945253a1ab6f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b3ed73d2-fd17-45f7-b8ab-b6374cc94138"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""VertAxis"",
                    ""id"": ""b0b4d128-bd58-4506-b19a-58fc2da9797d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertShoot"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""34287a84-feb4-42a7-b7dc-b9bc2455b623"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5751ac22-d5b8-4288-ae36-1ac21f253a02"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MoveAndShoot
        m_MoveAndShoot = asset.FindActionMap("MoveAndShoot", throwIfNotFound: true);
        m_MoveAndShoot_Movement = m_MoveAndShoot.FindAction("Movement", throwIfNotFound: true);
        m_MoveAndShoot_HorShoot = m_MoveAndShoot.FindAction("HorShoot", throwIfNotFound: true);
        m_MoveAndShoot_VertShoot = m_MoveAndShoot.FindAction("VertShoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MoveAndShoot
    private readonly InputActionMap m_MoveAndShoot;
    private IMoveAndShootActions m_MoveAndShootActionsCallbackInterface;
    private readonly InputAction m_MoveAndShoot_Movement;
    private readonly InputAction m_MoveAndShoot_HorShoot;
    private readonly InputAction m_MoveAndShoot_VertShoot;
    public struct MoveAndShootActions
    {
        private @PlayerControls m_Wrapper;
        public MoveAndShootActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MoveAndShoot_Movement;
        public InputAction @HorShoot => m_Wrapper.m_MoveAndShoot_HorShoot;
        public InputAction @VertShoot => m_Wrapper.m_MoveAndShoot_VertShoot;
        public InputActionMap Get() { return m_Wrapper.m_MoveAndShoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveAndShootActions set) { return set.Get(); }
        public void SetCallbacks(IMoveAndShootActions instance)
        {
            if (m_Wrapper.m_MoveAndShootActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MoveAndShootActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MoveAndShootActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MoveAndShootActionsCallbackInterface.OnMovement;
                @HorShoot.started -= m_Wrapper.m_MoveAndShootActionsCallbackInterface.OnHorShoot;
                @HorShoot.performed -= m_Wrapper.m_MoveAndShootActionsCallbackInterface.OnHorShoot;
                @HorShoot.canceled -= m_Wrapper.m_MoveAndShootActionsCallbackInterface.OnHorShoot;
                @VertShoot.started -= m_Wrapper.m_MoveAndShootActionsCallbackInterface.OnVertShoot;
                @VertShoot.performed -= m_Wrapper.m_MoveAndShootActionsCallbackInterface.OnVertShoot;
                @VertShoot.canceled -= m_Wrapper.m_MoveAndShootActionsCallbackInterface.OnVertShoot;
            }
            m_Wrapper.m_MoveAndShootActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @HorShoot.started += instance.OnHorShoot;
                @HorShoot.performed += instance.OnHorShoot;
                @HorShoot.canceled += instance.OnHorShoot;
                @VertShoot.started += instance.OnVertShoot;
                @VertShoot.performed += instance.OnVertShoot;
                @VertShoot.canceled += instance.OnVertShoot;
            }
        }
    }
    public MoveAndShootActions @MoveAndShoot => new MoveAndShootActions(this);
    public interface IMoveAndShootActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnHorShoot(InputAction.CallbackContext context);
        void OnVertShoot(InputAction.CallbackContext context);
    }
}
